-----------------------------------------------------------------------------------
						Section 1 Function Expressions
-----------------------------------------------------------------------------------
Functions on the fly

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Functions vs. Function Expressions
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
function diffOfSquares(a, b) {		// function
	return a*a - b*b;
}

var diff = function(a, b) {			// function expression
	return a*a - b*b;
};	

// Calling them 
diffOfSquares(4, 2);
diff(4, 2);

// note semicolon on second one
// first one is loaded into memory as soon as program begins running, whereas
	second one only loads once program REACHES that line of code.
	Second one is loading the function into a variable.

console.log(diff); // this will log out the entire function you've written

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  
A variable that holds a function can be passed into OTHER functions.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

var greeting = function() {
	alert("Thanks for visiting the Badlands!\nWe hope your stay is ... better than most.");
};

function closeTerminal(message) {
	message();
};

// calling function with another one
closeTerminal(greeting);

-----------------------------------------------------------------------------------
				Section 2 Passing Function Expressions As Parameters
-----------------------------------------------------------------------------------

We can pass function expressions without variables. 
The map() method will always take in a function as a parameter, and return a new array with the results

var numbers = [12, 4, 3, 9, 8, 6, 10, 1];
var results = numbers.map(*some cool function goes here*);	// kind of like a for loop

var results = numbers.map( function (arrayCell) {
	return arrayCell * 2;
} );












